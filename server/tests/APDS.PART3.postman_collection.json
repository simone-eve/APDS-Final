{
	"info": {
		"_postman_id": "2ede618a-e408-4ea3-b1b3-5548b26276c8",
		"name": "APDS.PART3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37441114"
	},
	"item": [
		{
			"name": "Register User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 - User Created\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has success message\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"message\", \"User added successfully!\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response includes user details\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.user).to.be.an(\"object\");\r",
							"    pm.expect(jsonData.user).to.have.property(\"fullName\");\r",
							"    pm.expect(jsonData.user).to.have.property(\"userId\");\r",
							"    pm.expect(jsonData.user).to.have.property(\"accountNumber\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"fullName\": \"Sally\",\r\n  \"idNumber\": \"1095384711412\",\r\n  \"accountNumber\": \"2191118\",\r\n  \"userId\": \"21949107\",\r\n  \"password\": \"12345678\"\r\n}\r\n\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://apds-final.onrender.com/api/users",
					"protocol": "https",
					"host": [
						"apds-final",
						"onrender",
						"com"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Employee",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Check if the response status is as expected\r",
							"pm.test(\"Status code is 201 or 400/409\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 400, 409]);\r",
							"});\r",
							"\r",
							"// Test for successful registration\r",
							"pm.test(\"Employee registered successfully\", function () {\r",
							"    if (pm.response.code === 201) {\r",
							"        pm.expect(pm.response.json().message).to.equal(\"Employee registered successfully!\");\r",
							"    }\r",
							"});\r",
							"\r",
							"// Test for validation errors\r",
							"pm.test(\"Validation errors handled correctly\", function () {\r",
							"    if (pm.response.code === 400) {\r",
							"        const errors = pm.response.json().errors;\r",
							"        pm.expect(errors).to.be.an(\"array\");\r",
							"        pm.expect(errors.length).to.be.at.least(1);\r",
							"    }\r",
							"});\r",
							"\r",
							"// Test for email conflict\r",
							"pm.test(\"Email conflict handled correctly\", function () {\r",
							"    if (pm.response.code === 409) {\r",
							"        pm.expect(pm.response.json().message).to.equal(\"Email is already registered\");\r",
							"    }\r",
							"});\r",
							"\r",
							"// General error handling\r",
							"pm.test(\"Response should contain a message\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"message\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Mary\",\r\n    \"surname\": \"Lou\",\r\n    \"email\": \"marylou@example.com\",\r\n    \"password\": \"12345678\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://apds-final.onrender.com/api/register",
					"protocol": "https",
					"host": [
						"apds-final",
						"onrender",
						"com"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Employee Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Check if the response status is as expected\r",
							"pm.test(\"Status code is 200, 400, or 401\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401]);\r",
							"});\r",
							"\r",
							"// Test for successful login\r",
							"pm.test(\"Login successful\", function () {\r",
							"    if (pm.response.code === 200) {\r",
							"        pm.expect(pm.response.json().message).to.equal(\"Login successful!\");\r",
							"    }\r",
							"});\r",
							"\r",
							"// Test for validation errors\r",
							"pm.test(\"Validation errors handled correctly\", function () {\r",
							"    if (pm.response.code === 400) {\r",
							"        const errors = pm.response.json().errors;\r",
							"        pm.expect(errors).to.be.an(\"array\");\r",
							"        pm.expect(errors.length).to.be.at.least(1);\r",
							"    }\r",
							"});\r",
							"\r",
							"// Test for invalid credentials\r",
							"pm.test(\"Invalid credentials handled correctly\", function () {\r",
							"    if (pm.response.code === 401) {\r",
							"        pm.expect(pm.response.json().message).to.equal(\"Invalid email or password\");\r",
							"    }\r",
							"});\r",
							"\r",
							"//\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"marylou@example.com\",\r\n    \"password\": \"12345678\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://apds-final.onrender.com/api/login",
					"protocol": "https",
					"host": [
						"apds-final",
						"onrender",
						"com"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "User Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has user login success message\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"message\", \"User login successful!\");\r",
							"});\r",
							"\r",
							"pm.test(\"Handle unauthorized access\", function () {\r",
							"    if (pm.response.status === 401) {\r",
							"        const jsonData = pm.response.json();\r",
							"        pm.expect(jsonData).to.have.property(\"message\", \"Invalid full name, account number, or password\");\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"fullName\": \"Sally\",\r\n  \"accountNumber\": \"2191118\",\r\n  \"password\": \"12345678\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://apds-final.onrender.com/api/userLogin",
					"protocol": "https",
					"host": [
						"apds-final",
						"onrender",
						"com"
					],
					"path": [
						"api",
						"userLogin"
					]
				}
			},
			"response": []
		},
		{
			"name": "Adding Payment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains payment added message\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"message\", \"Payment added successfully!\");\r",
							"    pm.expect(jsonData).to.have.property(\"payment\");\r",
							"});\r",
							"\r",
							"pm.test(\"Handle server error\", function () {\r",
							"    if (pm.response.status === 500) {\r",
							"        const jsonData = pm.response.json();\r",
							"        pm.expect(jsonData).to.have.property(\"message\", \"Internal server error\");\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"amount\": 2000,\r\n  \"currency\": \"USD\",\r\n  \"provider\": \"Swift\",\r\n  \"recipientName\": \"Jane Doe2\",\r\n  \"accountNumber\": \"1234367890\",\r\n  \"bankName\": \"Global Bank\",\r\n  \"swiftCode\": \"GBL123425\",\r\n  \"verification\": \"Pending\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://apds-final.onrender.com/api/payments",
					"protocol": "https",
					"host": [
						"apds-final",
						"onrender",
						"com"
					],
					"path": [
						"api",
						"payments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetch Payments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an array of payments\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"    if (jsonData.length > 0) {\r",
							"        pm.expect(jsonData[0]).to.have.property(\"amount\");\r",
							"        pm.expect(jsonData[0]).to.have.property(\"recipientName\");\r",
							"        pm.expect(jsonData[0]).to.have.property(\"bankName\");\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Handle server error\", function () {\r",
							"    if (pm.response.status === 500) {\r",
							"        const jsonData = pm.response.json();\r",
							"        pm.expect(jsonData).to.have.property(\"message\", \"Internal server error\");\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://apds-final.onrender.com/api/payments",
					"protocol": "https",
					"host": [
						"apds-final",
						"onrender",
						"com"
					],
					"path": [
						"api",
						"payments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Express Validator",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Check if the status code is 400 (Bad Request) due to validation errors\r",
							"pm.test(\"Status code is 400 when validation fails\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"// Parse the JSON response\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"// Verify that the response contains validation errors\r",
							"pm.test(\"Response has validation errors\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"errors\");\r",
							"    pm.expect(jsonData.errors).to.be.an(\"array\").that.is.not.empty;\r",
							"});\r",
							"\r",
							"// Check each specific validation error\r",
							"const expectedErrors = [\r",
							"    { field: \"fullName\", message: \"Full name is required\" },\r",
							"    { field: \"idNumber\", message: \"ID number is required\" },\r",
							"    { field: \"accountNumber\", message: \"Account number is required\" },\r",
							"    { field: \"password\", message: \"Password must be at least 6 characters\" }\r",
							"];\r",
							"\r",
							"expectedErrors.forEach(error => {\r",
							"    pm.test(`Check validation error for ${error.field}`, function () {\r",
							"        const fieldError = jsonData.errors.find(e => e.path === error.field);\r",
							"        pm.expect(fieldError).to.exist;\r",
							"        pm.expect(fieldError).to.have.property(\"msg\", error.message);\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"fullName\": \"\",\r\n  \"idNumber\": \"\",\r\n  \"accountNumber\": \"\",\r\n  \"userId\": \"123\",\r\n  \"password\": \"123\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://apds-final.onrender.com/api/users",
					"protocol": "https",
					"host": [
						"apds-final",
						"onrender",
						"com"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Helmet",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"X-Content-Type-Options is set\", function () {\r",
							"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://apds-final.onrender.com/api/users",
					"protocol": "https",
					"host": [
						"apds-final",
						"onrender",
						"com"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		}
	]
}